[tool.poetry]
name = "api"
version = "0.1.1"
description = "Local Artisans API"
authors = ["Stanislav Petrov"]
readme = "README.md"
packages = [{ include = "api" }]

[tool.poetry.dependencies]
python = ">=3.12.3,<3.13"
cachetools = "5.5.0"
httptools = "0.6.4"
orjson = "3.10.14"
fastapi = "^0.115.6"
uvicorn = "0.34.0"
asyncpg = "0.30.0"
greenlet = "3.1.1"

setuptools = "^75.8.0"
pendulum = "^3.0.0"
uvloop = { version = "^0.21.0", markers = "sys_platform != 'win32'" }
httpx = "^0.28.1"
authlib = "^1.3.1"
python-jose = "^3.3.0"
pyjwt = "^2.9.0"
psutil = "^6.0.0"
aiosqlite = "^0.20.0"
frozendict = "^2.4.4"
async-lru = "^2.0.4"
deepdiff = "^8.0.1"
pytest-xdist = "^3.6.1"

python-logging-loki = "0.3.1"
opentelemetry-instrumentation-fastapi = "0.50b0"
opentelemetry-distro = "0.50b0"
opentelemetry-exporter-otlp = "1.29.0"
opentelemetry-instrumentation-logging = "0.50b0"
opentelemetry-instrumentation-psycopg = "^0.50b0"
opentelemetry-instrumentation-sqlalchemy = "^0.50b0"
faststream = { extras = [
  "redis",
  "cli",
  "otel",
  "prometheus",
], version = "^0.5.33" }
structlog = "^24.4.0"
gunicorn = "^23.0.0"
ormar = { extras = ["postgresql", "orjson"], version = "^0.20.2" }
typing-extensions = "^4.12.2"
alembic = "^1.14.0"
fastapi-pagination = "^0.12.34"
databases = { version = "0.7.0", extras = ["aiopg", "asyncpg"] }
testcontainers = "^4.9.0"
aiopg = "^1.4.0"

[tool.poetry.group.common.dependencies]
python = "^3.12.3"
python_dateutil = "2.9.0.post0"
pydantic-settings = "2.7.1"
requests = "2.32.3"
redis = "5.2.1"
poetry-plugin-export = "1.8.0"
coverage = "^7.2.0"
pytest-cov = "^6.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.25.2"
ruff = "^0.8.1"
pre-commit = "^4.0.1"
pytest-xdist = "^3.6.1"

[build-system]
requires = ["poetry-core>=1.8.2"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
# In addition to the standard set of exclusions, omit all tests, plus a specific file.
extend-exclude = ["alembic/versions"]

[tool.ruff.lint]
select = [
  "C4",  # comprehensions
  "E",   # pycodestyle
  "F",   # pyflakes
  "Q",   # quotes
  "B",   # flake8-bugbear
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "W",   # warnings
  "YTT", # flake8-2020
  "BLE", # blind-except
  "FBT", # boolean-trap
  "COM", # trailing-comma
  "T20", # print
  "RET", # return
  "SIM", # simplify
  "PTH", # use-pathlib
  "ERA", # eradicate commented code
  "TRY", # try-except
]
ignore = ["E501"] # line length
unfixable = ["F401"]

# Additional formatting rules
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Additional lint configurations
[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["common", "api"]
lines-after-imports = 2

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.pytest.ini_options]
addopts = "-q -v -ra -n auto"
asyncio_mode = "auto"
log_cli = true
log_cli_level = "ERROR"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = "ignore"

[tool.flake8]
max-line-length = 79
exclude = [".git", "__pycache__", "__init__.py", ".mypy_cache", ".pytest_cache"]
ignore = [
  "F401", # unused imports -> handled by pylint
  "E501", # line too long -> handled by ruff
  "W503", # line break before binary operator -> this is the best practice
]

[tool.coverage.run]
source = ["api"]
omit = [
  "*/site-packages/*",
  "*/tests/*",
  "*/migrations/*",
  "*/alembic/*",
  "*/alembic.ini",
]

[tool.coverage.report]
fail_under = 78

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$major.$minor.$patch"
version_scheme = "semver"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[tool.pylint]
ignore = [".git"]
ignore-paths = ["^alembic/versions/"]
persistent = true
suggestion-mode = true
load-plugins = [
  "pylint.extensions.confusing_elif",
  "pylint.extensions.for_any_all",
  "pylint.extensions.consider_ternary_expression",
  "pylint.extensions.bad_builtin",
  "pylint.extensions.mccabe",
  "pylint.extensions.check_elif",
  "pylint.extensions.empty_comment",
  "pylint.extensions.eq_without_hash",
  "pylint.extensions.private_import",
  "pylint.extensions.redefined_loop_name",
  "pylint.extensions.set_membership",
]
disable = [
  "fixme",
  "missing-module-docstring",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "line-too-long",
]
max-line-length = 79
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.basic]
good-names = ["_", "ex", "db", "id", "fn"]
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
include-naming-hint = true

[tool.mypy]
exclude = ["alembic/versions/.*"]
plugins = ["pydantic.mypy"]
disallow_untyped_defs = false
ignore_missing_imports = true
show_column_numbers = true
show_error_codes = true
warn_return_any = true
